variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CUDA_ARCH: "7.0"

stages:
  - lint
  - build and test
  - publish
  - pages

.reports: &ready_reports
  - mkdir -p build/reports/

.add-cuda-key: &cuda_key
  - rm /etc/apt/sources.list.d/cuda.list
  - apt-key del 7fa2af80
  - apt-get update && apt-get install -y --no-install-recommends wget
  - wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
  - dpkg -i cuda-keyring_1.0-1_all.deb

linting:
  stage: lint
  image: ubuntu:20.04
  before_script:
    - *ready_reports
    - apt-get -y update
    - apt-get -y install build-essential clang-tidy cmake
    - mkdir release
    - cd release/
    - cmake ../ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
  script:
    - echo "Running lint check"
    - run-clang-tidy -quiet > clang-tidy.out
    - cat clang-tidy.out | ../scripts/clang-tidy-to-junit/clang-tidy-to-junit.py ../ > linting.xml
  after_script:
    - mv release/linting.xml build/reports/
  artifacts:
    paths:
      - build/

build-test-debug:
  stage: build and test
  image: nvidia/cuda:11.6.0-devel-ubuntu20.04
  tags: [k8srunner-gpu-v100]
  before_script:
    - *ready_reports
    - *cuda_key
    - apt-get -y update
    - apt-get -y install build-essential cmake lcov python3
    - nvidia-smi
    - mkdir debug
    - cd debug/
    - cmake ../ -DCOVERAGE_REPORT=ON -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - make coverage
  after_script:
    - mv debug/coverage.xml build/reports/code-coverage.xml
    - mv debug/coverage/ ./
  artifacts:
    paths:
      - build/
      - coverage/
    reports:
      cobertura: build/reports/code-coverage.xml

build-test-release:
  stage: build and test
  image: nvidia/cuda:11.6.0-devel-ubuntu20.04
  tags: [k8srunner-gpu-v100]
  before_script:
    - *ready_reports
    - *cuda_key
    # We need CMake >= 3.21.0 for the --output-junit option on CTest.
    - apt-get -y update
    - apt-get -y install build-essential gpg wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
    - echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
    - apt-get -y update
    - rm /usr/share/keyrings/kitware-archive-keyring.gpg
    - apt-get -y install kitware-archive-keyring
    - apt-get -y install cmake
    - cmake --version
    - nvidia-smi
    - mkdir release
    - cd release/
    - cmake ../ -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - ctest --output-junit unit-tests.xml
  after_script:
    - mv release/unit-tests.xml build/reports/
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml

pages:
  stage: publish
  image: alpine
  dependencies:
    - build-test-debug
  script:
    - rm -rf public
    - mkdir -p public
    - mv coverage/ public/
  artifacts:
    paths:
      - public

# Include CI templates
include:
  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs-pages.gitlab-ci.yml"

# Conan
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/conan.gitlab-ci.yml'
    
    

  # .post step finalisers eg: badges
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
