variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CUDA_ARCH: "8.0"
  CONTAINER_SCANNING_DISABLED: 'true'
  
  
stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

# Include CI templates
include:
  # Conan
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/conan.gitlab-ci.yml"

  # Python package
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"

  # Release automation
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"

  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"

  # .post step finalisers e.g. badges
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"

.reports: &ready_reports
  - mkdir -p build/reports/

.add-cuda-key: &cuda_key
  - apt-key del 7fa2af80
  - apt-get update && apt-get install -y --no-install-recommends wget
  - wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
  - dpkg -i cuda-keyring_1.0-1_all.deb

.install-cuda-packages-rocky: &cuda_packages_rocky
  - dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo
  - dnf clean all
  - dnf -y install cuda-nvcc-12-4 cuda-cudart-devel-12-4 libcufft-devel-12-4

.install-intel-packages-rocky: &intel_packages_rocky
  - |
    cat > /tmp/oneAPI.repo << EOF
    [oneAPI]
    name=IntelÂ® oneAPI repository
    baseurl=https://yum.repos.intel.com/oneapi
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    EOF
  - mv /tmp/oneAPI.repo /etc/yum.repos.d
  - dnf -y install intel-oneapi-compiler-dpcpp-cpp
  - dnf -y install intel-oneapi-mkl intel-oneapi-mkl-devel
  - . /opt/intel/oneapi/setvars.sh

.build-manylinux-wheels: &build_wheels
  - dnf -y install zip
  - export PATH=/usr/local/cuda/bin:$PATH
  - export CMAKE_BUILD_PARALLEL_LEVEL=16
  - export CMAKE_ARGS="-DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DMKL_LINK=static -DNVCC_COMPILER_BINDIR=g++ -DBUILD_INFO=ON"
  # Build a single wheel for all Python 3 versions on Linux.
  # Since we're using ctypes, we don't need any particular Python version,
  # we just need to fix the Python/ABI tags with the "wheel tags" command.
  - export PYVER="cp312"
  - rm -rf ./build/temp.*
  - ln -s /opt/python/$PYVER-$PYVER/bin/python3 /usr/local/bin/python3
  - ln -s /opt/python/$PYVER-$PYVER/bin/pip /usr/local/bin/pip
  - ln -s /opt/python/$PYVER-$PYVER/bin/pip3 /usr/local/bin/pip3
  - pip install --upgrade build setuptools wheel
  - make python-build PYTHON_BUILD_TYPE="tag_pyproject"
  - python3 -m wheel tags --remove --python-tag=py3 --abi-tag=none dist/*.whl
  - for whl in ./dist/*.whl; do
      auditwheel repair "$whl" -w wheelhouse;
    done

cpp-lint:
  stage: lint
  image: ubuntu:22.04
  before_script:
    - *ready_reports
    - apt-get -y update
    - apt-get -y install build-essential clang-tidy cmake libomp-dev libomp-14-dev
    - mkdir release
    - cd release/
    - cmake ../ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
  script:
    - echo "Running lint check"
    - run-clang-tidy -quiet | tee clang-tidy.out
    - cat clang-tidy.out | ../scripts/clang-tidy-to-junit/clang-tidy-to-junit.py ../ > linting.xml
  after_script:
    - mv release/linting.xml build/reports/
  artifacts:
    paths:
      - build/

cpp-format:
  stage: lint
  image: alpine:3.16  # Use Uncrustify-0.75.1_f
  before_script:
    - apk update
    - apk add uncrustify
  script:
    - find src tests -iname '*.h' -o -iname '*.cpp' -o -iname '*.c' -o -iname '*.cu' | xargs uncrustify -c uncrustify.cfg -l CPP --check

python-lint:
  image: ubuntu:22.04
  stage: lint
  tags: [ska-default]
  before_script:
    - apt-get -y update
    - apt-get -y install make python3 python3-pip
    - 'make help | grep python-lint'
    - pip3 install --upgrade pip poetry
    - poetry config virtualenvs.in-project true
    - poetry config virtualenvs.create false
    - poetry install --no-root
  script:
    - make python-lint
  artifacts:
    paths:
      - build/
    when: always

build-test-debug:
  stage: test
  image: nvidia/cuda:12.5.0-devel-ubuntu22.04
  tags: [ska-gpu-a100]
  before_script:
    - *ready_reports
    - *cuda_key
    - apt-get -y update
    - apt-get -y install build-essential cmake lcov python3
    - nvidia-smi
    - mkdir debug && cd debug/
    - cmake ../ -DCOVERAGE_REPORT=ON -DBUILD_INFO=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - make coverage
  after_script:
    - mv debug/coverage.xml build/reports/code-coverage.xml
    - mv debug/coverage/ ./
  artifacts:
    paths:
      - build/
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/code-coverage.xml

build-test-release:
  stage: test
  image: nvidia/cuda:12.5.0-devel-ubuntu22.04
  tags: [ska-gpu-a100]
  before_script:
    - *ready_reports
    - *cuda_key
    - apt-get -y update
    - apt-get -y install build-essential cmake
    - cmake --version
    - nvidia-smi
    - mkdir release && cd release/
    - cmake ../ -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - ctest --rerun-failed --output-on-failure --output-junit unit-tests.xml
  after_script:
    - mv release/unit-tests.xml build/reports/
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml


# The "python-build-for-development" stage is done as part of "python-test".
python-build-for-development:
  rules:
    - when: never

# The "python-build-for-development-legacy" stage needs to be disabled.
# It will try to run because we have a "setup.py" file.
python-build-for-development-legacy:
  rules:
    - when: never

# The "python-build-for-publication" stage needs to be disabled.
# We have to build the wheels when we publish them, since they are too large
# to share as artifacts between stages on GitLab.
# This is done in the "python-publish" stage.
python-build-for-publication:
  rules:
    - when: never

# The "python-build-for-publication-legacy" stage needs to be disabled.
# It will try to run because we have a "setup.py" file.
python-build-for-publication-legacy:
  rules:
    - when: never

# Need to override the template stage because we want to run this on a GPU.
python-test:
  stage: test
  image: nvidia/cuda:12.5.0-devel-ubuntu22.04
  tags: [ska-gpu-a100]
  before_script:
    - echo "Running Python test stage"
    - *cuda_key
    - apt-get -y update
    - apt-get -y install build-essential cmake python3 python3-pip
    - pip3 install --upgrade pip poetry
    - poetry config virtualenvs.create false
    - poetry install --no-root --with dev,test --without docs --extras "cuda"
    - export CMAKE_ARGS="-DCUDA_ARCH=${CUDA_ARCH}"
    - export CMAKE_BUILD_PARALLEL_LEVEL=16
    - pip3 install .
  script:
    - pytest --junitxml=build/reports/unit-tests.xml tests/

pages:
  stage: publish
  image: alpine
  dependencies:
    - build-test-debug
  script:
    - rm -rf public
    - mkdir -p public
    - mv coverage/ public/
  artifacts:
    paths:
      - public

# We have to build and publish the wheels in a single stage, since
# the artifacts would be too large to share between stages in GitLab.
# We also have to run "auditwheel repair" on each of the generated wheels.
python-publish:
  stage: publish
  tags: [ska-default]
  image: quay.io/pypa/manylinux_2_28_x86_64
  before_script:
    - *cuda_packages_rocky
    - *intel_packages_rocky
    - python3.12 -m pip install twine
  script:
    - *build_wheels
    - python3.12 -m twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url ${CAR_PYPI_REPOSITORY_URL} wheelhouse/*
    - python3.12 -m twine upload --username gitlab-ci-token --password ${CI_JOB_TOKEN} --repository-url https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi wheelhouse/*
  rules:
    - if: '$CI_COMMIT_TAG'

# The "python-publish-to-car" stage is disabled, since the wheels are built
# in "python-publish" and uploaded to both the CAR and GitLab there.
# This avoids having to build the wheels twice.
python-publish-to-car:
  rules:
    - when: never

# The "python-publish-to-gitlab" stage is disabled, since the wheels are built
# in "python-publish" and uploaded to both the CAR and GitLab there.
# This avoids having to build the wheels twice.
python-publish-to-gitlab:
  rules:
    - when: never
