variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CUDA_ARCH: "7.0"

stages:
  - lint
  - build
  - build and test
  - publish
  - pages

.reports: &ready_reports
  - mkdir -p build/reports/

linting:
  stage: lint
  image: ubuntu:20.04
  before_script:
    - *ready_reports
    - apt-get -y update
    - apt-get -y install build-essential clang-tidy cmake
    - mkdir release
    - cd release/
    - cmake ../ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
  script:
    - echo "Running lint check"
    - run-clang-tidy -quiet > clang-tidy.out
    - cat clang-tidy.out | ../scripts/clang-tidy-to-junit/clang-tidy-to-junit.py ../ > linting.xml
  after_script:
    - mv release/linting.xml build/reports/
  artifacts:
    paths:
      - build/

build-python-wheels:
  stage: build
  image: quay.io/pypa/manylinux2014_x86_64
  before_script:
    - yum install -y yum-utils
    - yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo
    - yum clean all
    - yum install -y cuda-nvcc-11-4 cuda-cudart-devel-11-4 libcufft-devel-11-4
  script:
    - for PYBIN in /opt/python/cp*/bin; do
        "${PYBIN}/pip" wheel . --no-deps -w temp-wheels;
      done
    - for whl in temp-wheels/*.whl; do
        auditwheel repair "$whl" -w wheelhouse;
      done
  rules:
    - exists:
        - pyproject.toml
        - setup.py
  artifacts:
    paths:
      - wheelhouse/
    expire_in: 3600 seconds

build-test-debug:
  stage: build and test
  image: nvidia/cuda:11.3.0-devel-ubuntu20.04
  tags: [k8srunner-gpu-v100]
  before_script:
    - *ready_reports
    - apt-get -y update
    - apt-get -y install build-essential cmake lcov python3
    - nvidia-smi
    - mkdir debug
    - cd debug/
    - cmake ../ -DCOVERAGE_REPORT=ON -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - make coverage
  after_script:
    - mv debug/coverage.xml build/reports/code-coverage.xml
    - mv debug/coverage/ ./
  artifacts:
    paths:
      - build/
      - coverage/
    reports:
      cobertura: build/reports/code-coverage.xml

build-test-release:
  stage: build and test
  image: nvidia/cuda:11.3.0-devel-ubuntu20.04
  tags: [k8srunner-gpu-v100]
  before_script:
    - *ready_reports
    # We need CMake >= 3.21.0 for the --output-junit option on CTest.
    - apt-get -y update
    - apt-get -y install build-essential gpg wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
    - echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
    - apt-get -y update
    - rm /usr/share/keyrings/kitware-archive-keyring.gpg
    - apt-get -y install kitware-archive-keyring
    - apt-get -y install cmake
    - cmake --version
    - nvidia-smi
    - mkdir release
    - cd release/
    - cmake ../ -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - ctest --output-junit unit-tests.xml
  after_script:
    - mv release/unit-tests.xml build/reports/
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml

pages:
  stage: publish
  image: alpine
  dependencies:
    - build-test-debug
  script:
    - rm -rf public
    - mkdir -p public
    - mv coverage/ public/
  artifacts:
    paths:
      - public

python-publish-to-car:
  stage: publish
  image: quay.io/pypa/manylinux2014_x86_64
  allow_failure: true
  dependencies:
    - build-python-wheels
  before_script:
    - python3.10 -m pip install twine
  script:
    - python3.10 -m twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url ${CAR_PYPI_REPOSITORY_URL} wheelhouse/*
  rules:
    - if: '$CI_COMMIT_TAG'

python-publish-to-gitlab:
  stage: publish
  image: quay.io/pypa/manylinux2014_x86_64
  allow_failure: true
  dependencies:
    - build-python-wheels
  before_script:
    - python3.10 -m pip install twine
  script:
    - python3.10 -m twine upload --username gitlab-ci-token --password ${CI_JOB_TOKEN} --repository-url https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi wheelhouse/*
  rules:
    - if: '$CI_COMMIT_TAG'

# Include CI templates
include:
  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs-pages.gitlab-ci.yml"

  # .post step finalisers eg: badges
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
